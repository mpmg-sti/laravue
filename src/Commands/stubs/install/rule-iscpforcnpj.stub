<?php

namespace App\Rules;

use Illuminate\Contracts\Validation\Rule;

class IsCpfOrCnpj implements Rule
{
    private $field;
    private $isCPF = true;
    private $isCNPJ = true;

    /**
     * Create a new rule instance.
     *
     * @return void
     */
    public function __construct()
    {
        //
    }

    /**
     * Determine if the validation rule passes.
     *
     * @param  string  $attribute
     * @param  mixed  $value
     * @return bool
     */
    public function passes($attribute, $value)
    {
        $this->field = $attribute;

        /** CPF **/

        // Extrai somente os números
        $value = preg_replace( '/[^0-9]/is', '', $value );
     
        // Verifica se foi informado todos os digitos corretamente
        if (strlen($value) != 11) {
            $this->isCPF = false;
        }

        // Verifica se foi informada uma sequência de digitos repetidos. Ex: 111.111.111-11
        if (preg_match('/(\d)\1{10}/', $value)) {
            $this->isCPF = false;
        }

        // Faz o calculo para validar o CPF
        for ($t = 9; $t < 11; $t++) {
            for ($d = 0, $c = 0; $c < $t; $c++) {
                $d += $value[$c] * (($t + 1) - $c);
            }
            $d = ((10 * $d) % 11) % 10;
            if ($value[$c] != $d) {
                $this->isCPF = false;
            }
        }

        /** CNPJ **/	

        // Valida tamanho
        if (strlen($value) != 14) {
            $this->isCNPJ = false;
        }      

        // Verifica se todos os digitos são iguais
        if (strlen($value) != 14 && preg_match('/(\d)\1{13}/', $value)) {
            $this->isCNPJ = false;	
        }     

        if( strlen($value) != 14 ) {
            $this->isCNPJ = false;
        } else {
            // Valida primeiro dígito verificador
            for ($i = 0, $j = 5, $soma = 0; $i < 12; $i++) {
                $soma += $value[$i] * $j;
                $j = ($j == 2) ? 9 : $j - 1;
            }

            $resto = $soma % 11;

            if ($value[12] != ($resto < 2 ? 0 : 11 - $resto)) {
                $this->isCNPJ = false;
            }

            // Valida segundo dígito verificador
            for ($i = 0, $j = 6, $soma = 0; $i < 13; $i++) {
                $soma += $value[$i] * $j;
                $j = ($j == 2) ? 9 : $j - 1;
            }

            $resto = $soma % 11;

            $this->isCNPJ = $value[13] == ($resto < 2 ? 0 : 11 - $resto);
        }

        return $this->isCPF || $this->isCNPJ;
    }

    /**
     * Get the validation error message.
     *
     * @return string
     */
    public function message()
    {
        $field = str_replace('_', ' ', $this->field);
        $field = ucwords($field);
        return "$field possui número CPF ou CNPJ inválido.";
    }
}
