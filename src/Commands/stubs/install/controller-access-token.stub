<?php

namespace App\Http\Controllers\Laravue;

use Illuminate\Support\Facades\DB;
use Exception;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use League\OAuth2\Server\Exception\OAuthServerException;
use Psr\Http\Message\ServerRequestInterface;
use Adldap\Laravel\Facades\Adldap;
use App\Models\Monitor;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use Symfony\Component\HttpFoundation\Response;
use Intervention\Image\ImageManagerStatic as Image;

use \Laravel\Passport\Http\Controllers\AccessTokenController as ATC;
use Auth;
use Illuminate\Support\Facades\File;
use Intervention\Image\Exception\NotReadableException;

/**
 * Laravel Passport - geração e emissão de token customizado para validação com CAS e LDAP.
 *
 * @author      Jenner <jenner@mpmg.mp.br>
 * @author      Messi89 OVERGEN <@messi89minou>
 * @link        https://gist.github.com/messi89/489473c053e3ea8d9e034b0032effb1d
 * @version 0.1
 * @copyright  Copyright (c) 2019, MPMG.
 * @since 27/08/2019
 * @todo Subir para o GitLab e testar
 */
class AccessTokenController extends ATC
{
    /**
     * Variável para retorno de mensagens de erro da classe
     *
     * @var string
     */
    private $msgTraceError = '';

    /**
     * Metodo de emissão do token sobrescrito do Laravel Passaport para implementar a validação com CAS e LDAP
     *
     * @param ServerRequestInterface $request
     * @return object       // Objeto com dados do usuário logado e token de acesso do Laravel Passaport
     */
    public function issueToken(ServerRequestInterface $request)
    {
        try {
            $requestBody = $request->getParsedBody();

            if (isset($requestBody['username']) && isset($requestBody['password'])) {
                $this->setMsgTraceError('->Buscando usuario no LDAP...', __LINE__, __FUNCTION__);
                $userLogged = $this->userByLDAP($requestBody);
            }
            else {
                $this->setMsgTraceError('->Buscando usuario no CAS...', __LINE__, __FUNCTION__);
                $userLogged = $this->userByCAS($requestBody, $request->getServerParams());
            }

            if (isset($userLogged) && ! empty($userLogged)) {

                $userMPMG = new \stdClass();
                $userMPMG->login =  $userLogged;

                $this->setMsgTraceError("->Buscando dados do usuario no LDAP... [user:{$userMPMG->login}]", __LINE__, __FUNCTION__);

                $userMPMG->ldap = Adldap::connect()->search()
                        ->select(['nome', 'mamp', 'idpessoa', 'funcao', 'idunidade', 'nomecargo', 'nomeunidade', 'mail', 'unidadeenderecocompleto'])
                        ->findBy('login', $userMPMG->login); // Adldap\Models\Entry Object

                if (isset($userMPMG->ldap->mamp[0])) {
                    $password = $userMPMG->ldap->mamp[0] . $userMPMG->ldap->mail[0];
                    $userMPMG->avatar = $this->setUserAvatar($userMPMG->ldap->mamp[0]);
                }
                else {
                    $password = '05121652' . $userMPMG->ldap->mail[0];
                    $userMPMG->avatar = $this->setUserAvatar('000000');
                }

                $this->setMsgTraceError("->Buscando/criando usuario no Laravel...[user:{$userMPMG->ldap->mail[0]}]", __LINE__, __FUNCTION__);
                $userMPMG->laravel = User::getCreateUser($userMPMG->ldap->mail[0], $userMPMG->ldap->nome[0], $password, true); // App\User Object

                if (Auth::attempt(['email' => $userMPMG->ldap->mail[0], 'password' => $password ])) {
                    $userMPMG->access_keys = auth()->user()->getAllPermissions();
                }

                $requestbody = $request->getParsedBody();
                $requestbody['username'] = $userMPMG->laravel->email;
                $requestbody['password'] = $password;
                $request = $request->withParsedBody($requestbody);

                $this->setMsgTraceError("->Buscando token de acesso... [user:{$userMPMG->laravel->email}]", __LINE__, __FUNCTION__);

                $tokenResponse = parent::issueToken($request);

                $content = $tokenResponse->getContent();

                $data = json_decode($content, true);

                if(isset($data["error"])) {
                    $this->throwErrorMonitor('As credenciais de acesso estão incorretas.', __LINE__, __FUNCTION__);
                    throw new OAuthServerException($this->msgTraceError, 6, 'invalid_credentials', Response::HTTP_UNAUTHORIZED);
                }

                if (isset($data['access_token'])) {
                    //add access token to user
                    $user = collect($userMPMG); 
                    $user->put('access_token', $data['access_token']);
                    $user->put('refresh_token', $data['refresh_token']);

                    return response()->json($user);
                }
                else {
                    $this->throwErrorMonitor('Credenciais inválidas.', __LINE__, __FUNCTION__);
                    return response(["message" => $this->msgTraceError], Response::HTTP_UNAUTHORIZED);
                }

            }
            else {
                $this->throwErrorMonitor('Não conseguiu encontrar o usuário.', __LINE__, __FUNCTION__);  
                return response(["message" => $this->msgTraceError], Response::HTTP_UNAUTHORIZED);
            }
        }
        catch (ModelNotFoundException $e) {
            $this->throwErrorMonitor($e->getMessage(), __LINE__, __FUNCTION__);
            throw new ModelNotFoundException($this->msgTraceError);
        }
        catch (OAuthServerException $e) {
            $this->throwErrorMonitor('As credenciais de acesso estão incorretas. ' . $e->getMessage(), __LINE__, __FUNCTION__);
            throw new OAuthServerException($this->msgTraceError, 6, 'invalid_credentials', Response::HTTP_UNAUTHORIZED);
        }
        catch (Exception $e) {
            $this->throwErrorMonitor($e->getMessage(), __LINE__, __FUNCTION__);
            throw new Exception($this->msgTraceError);
        }
    }

   /**
    * Valida o usuário e senha passados por POST no servidor de LDAP e retorna o usuário logado ou false
    *
    * @param array $requestBody
    * @return string|boolean
    */
    private function userByLDAP($requestBody)
    {
        try {
            $userName = $requestBody['username'];

            $this->setMsgTraceError('->Conectando ao LDAP...', __LINE__, __FUNCTION__);

            $adldap = Adldap::connect();
            $userDN = $adldap->search()->select(['login'])->findBy('login', $userName);

            if (isset($userDN->distinguishedname[0])) {
                $password = $requestBody['password'];

                $this->setMsgTraceError('->Autenticando usuario no LDAP..', __LINE__, __FUNCTION__);

                if ($adldap->auth()->attempt($userDN->distinguishedname[0], $password, true) == true) {
                    return $userName;
                }
                else {
                    $this->setMsgTraceError('Usuário ou senha inválidos.', __LINE__, __FUNCTION__);
                    return false;
                }
            }
            else {
                $this->setMsgTraceError('Não foi possível conectar ao servidor de LDAP', __LINE__, __FUNCTION__);
                return false;
            }
        }
        catch (Exception $e) {
            $this->throwErrorMonitor($e->getMessage(), __LINE__, __FUNCTION__);
            throw new Exception($this->msgTraceError);
        }
    }


    /**
     * Verifica se foi passado um ticket do CAS por POST ou GET, valida o ticket e retorna o usário logado ou false
     *
     * @param array $requestBody
     * @param array $serverParams
     * @return string|boolean
     */
    private function userByCAS($requestBody, $serverParams)
    {
        try {
            
            $this->setMsgTraceError('->Buscando ticket do CAS...', __LINE__, __FUNCTION__);

            parse_str(parse_url($serverParams['HTTP_REFERER'], PHP_URL_QUERY), $urlQueries);
            
            if (isset($requestBody['ticket'])) {
                $casTicket = $requestBody['ticket'];
            }
            
            elseif (isset($urlQueries['ticket'])) {
                $casTicket = $urlQueries['ticket'];
            }
            else {
                $this->setMsgTraceError('Ticket não encontrado.', __LINE__, __FUNCTION__);
                return false;
            }

            $urlService = strtok($_SERVER['HTTP_REFERER'], '?');

            if (isset($urlQueries['url'])) {
                $urlService = $urlService . '?url=' . $urlQueries['url'];
            }

            $urlService = rtrim($urlService, '/');

            return $this->checkTicket($urlService, $casTicket);
        }
        catch (Exception $e) {
            $this->throwErrorMonitor($e->getMessage(), __LINE__, __FUNCTION__);
            throw new Exception($this->msgTraceError);
        }
    }


    /**
     * Valida o ticket fornecido pelo frontend no servidor do CAS e retorna o usuário logado ou false
     *
     * @param string $urlService
     * @param string $casTicket
     * @return string|boolean
     */
    private function checkTicket($urlService, $casTicket)
    {
        try {

            $casHostName = config('cas.cas_hostname', 'sso.mpmg.mp.br');
            $casUri = config('cas.cas_uri', '/cas');

            $casService = 'https://' . $casHostName . $casUri;

            $casCheck = "$casService/validate?ticket=$casTicket&service=" . urlencode($urlService);

            $this->setMsgTraceError("->Validando ticket no CAS... [cas:$casCheck]", __LINE__, __FUNCTION__);

            $response = file_get_contents($casCheck);

            if (strpos($response, 'yes') !== false) {
                return rtrim(substr($response, 4));
            }
            else {
                $this->setMsgTraceError('Ticket inválido.', __LINE__, __FUNCTION__);
                return false;
            }
        }
        catch (Exception $e) {
            $this->throwErrorMonitor($e->getMessage(), __LINE__, __FUNCTION__);
            throw new Exception($this->msgTraceError);
        }
    }

    /**
     * Monta a mensagem de erro/debug da classe
     *
     * @param string $msgTraceError
     * @param int $line
     * @param string $function
     * @return void
     */
    public function setMsgTraceError($msgTraceError, $line = null, $function = null) {
        $this->msgTraceError = "$msgTraceError [<$line>$function] " . $this->msgTraceError;
    }

    /**
     * Grava o erro ao tentar gerar o token em Monitor e no arquivo de log
     *
     * @param string $msgTraceError
     * @param int $line
     * @param string $function
     * @return void
     */
    public function throwErrorMonitor($msgTraceError, $line = null, $function = null) { 
        $this->setMsgTraceError($msgTraceError, $line);
        Log::error($this->msgTraceError);
         Monitor::setLogNoUserAuth($this->msgTraceError, $line, $function, __FILE__, __CLASS__);
    }

    private function setUserAvatar($mamp) {
        $pathAvatar = public_path('img/users/avatar/');
        if( ! File::exists($pathAvatar)) {  // Verifica se a pasta da imagem existe
            Log::info($pathAvatar . ' nao existe ou nao esta acessivel!');
            return 'folder_not_found';
        }
        try {
            $foto = DB::table('VW_FUNCIONARIO_MPS')->where('mamp', $mamp)->first();

            if (isset($foto->foto)) {
                $im = @imagecreatefromstring($foto->foto);
                if ($im != false){
                    try {
                        $img = Image::make($foto->foto)->crop(283, 283, 0, 10);
                        $img->save(public_path("img/users/avatar/$mamp.jpeg"));
                        return "img/users/avatar/$mamp.jpeg";
                    } catch (NotReadableException $e) {
                        Monitor::setLogNoUserAuth("Conteúdo inválido do binário da foto de perfil.", __LINE__, __FUNCTION__, __FILE__, __CLASS__);
                    }
                } else {
                    Monitor::setLogNoUserAuth($im, __LINE__, __FUNCTION__, __FILE__, __CLASS__);
                }
            } else {
                Monitor::setLogNoUserAuth("Sem acesso a foto->foto", __LINE__, __FUNCTION__, __FILE__, __CLASS__);
            }
        }catch(Exception $e){
            Monitor::setLogNoUserAuth("Sem acesso a VW_FUNCIONARIO_MPS.", __LINE__, __FUNCTION__, __FILE__, __CLASS__);
        }
        return 'img/users/avatar/profile.jpg';
    }
}